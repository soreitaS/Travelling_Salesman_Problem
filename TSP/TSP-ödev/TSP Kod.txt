import random
import math
import time

def distance(point1, point2):
    return sum((p1 - p2) ** 2 for p1, p2 in zip(point1, point2)) ** 0.5

def total_distance(points, order):
    total = 0
    for i in range(len(order) - 1):
        total += distance(points[order[i]], points[order[i + 1]])
    total += distance(points[order[-1]], points[order[0]])  # Dönüş
    return total

def read_coordinates_from_file(filename):
    points = []
    with open(filename, 'r') as file:
        size = int(file.readline())
        for _ in range(size):
            x, y = map(float, file.readline().strip().split())
            points.append((x, y))
    return points

def simulated_annealing_tsp(points, initial_temp=1000, final_temp=0.1, cool_rate=0.99):
    n = len(points)
    current_order = list(range(n))
    random.shuffle(current_order)
    current_distance = total_distance(points, current_order)
    
    T = initial_temp
    while T > final_temp:
        new_order = current_order[:]
        # Rastgele iki şehir seç
        city1, city2 = random.sample(range(n), 2)
        # Yeni yol oluştur
        new_order[city1], new_order[city2] = new_order[city2], new_order[city1]
        new_distance = total_distance(points, new_order)
        delta = new_distance - current_distance
        if delta < 0 or random.random() < math.exp(-delta / T):
            current_order = new_order
            current_distance = new_distance
        T *= cool_rate
    
    return current_distance, current_order

# Dosyadan koordinatları oku
filename = 'tsp_51_1.txt'
start_time = time.time()  # Başlangıç zamanını al
points = read_coordinates_from_file(filename)

# Simulated Annealing ile TSP için optimal çözümü bul
optimal_cost, optimal_order = simulated_annealing_tsp(points)

# Bitiş zamanını al ve işlem süresini hesapla
end_time = time.time()
execution_time = end_time - start_time

# Sonucu ve işlem süresini yazdır
print("Optimal maliyet değeri:", optimal_cost)
print("Optimal çözüm için sırası ile gidilecek nodelar (şehirler):", optimal_order)
print("İşlem süresi:", execution_time, "saniye")
